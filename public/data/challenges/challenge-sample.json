[
	{
		"slug": "simple-counter",
		"title": "Simple Counter",
		"description": "Build a simple counter component that increments and decrements a number when buttons are clicked.",
		"difficulty": "Easy",
		"tags": [ "hooks", "state management" ],
		"solution": "const Counter = () => {\n    const [count, setCount] = useState(0);\n    return (\n        <div>\n            <button onClick={() => setCount(count - 1)}>-</button>\n            <span>{count}</span>\n            <button onClick={() => setCount(count + 1)}>+</button>\n        </div>\n    );\n};"
	},
	{
		"slug": "todo-list",
		"title": "Todo List",
		"description": "Create a Todo list application where users can add, remove, and mark tasks as complete.",
		"difficulty": "Medium",
		"tags": [ "state management", "props", "events" ],
		"solution": "const TodoApp = () => {\n    const [todos, setTodos] = useState([]);\n    const addTodo = (todo) => setTodos([...todos, { text: todo, completed: false }]);\n    return (\n        <div>\n            <input type='text' />\n            <button onClick={() => addTodo('new task')}>Add Todo</button>\n            <ul>\n                {todos.map((todo, index) => (\n                    <li key={index}>{todo.text}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};"
	},
	{
		"slug": "fetch-data-from-api",
		"title": "Fetch Data from API",
		"description": "Fetch and display data from an external API using React hooks.",
		"difficulty": "Medium",
		"tags": [ "API", "fetch", "hooks" ],
		"solution": "const DataFetcher = () => {\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(data => setData(data));\n    }, []);\n    return (\n        <ul>\n            {data.map(item => (\n                <li key={item.id}>{item.title}</li>\n            ))}\n        </ul>\n    );\n};"
	},
	{
		"slug": "accordion-component",
		"title": "Accordion Component",
		"description": "Build an accordion component that expands or collapses sections when clicked.",
		"difficulty": "Medium",
		"tags": [ "component", "state management" ],
		"solution": "const Accordion = ({ sections }) => {\n    const [openIndex, setOpenIndex] = useState(null);\n    return (\n        <div>\n            {sections.map((section, index) => (\n                <div key={index}>\n                    <h3 onClick={() => setOpenIndex(openIndex === index ? null : index)}>\n                        {section.title}\n                    </h3>\n                    {openIndex === index && <p>{section.content}</p>}\n                </div>\n            ))}\n        </div>\n    );\n};"
	},
	{
		"slug": "modal-window",
		"title": "Modal Window",
		"description": "Create a modal window that opens when a button is clicked and closes when clicking outside the modal or on a close button.",
		"difficulty": "Hard",
		"tags": [ "state management", "events" ],
		"solution": "const Modal = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    return (\n        <div>\n            <button onClick={() => setIsOpen(true)}>Open Modal</button>\n            {isOpen && (\n                <div>\n                    <div onClick={() => setIsOpen(false)}>Close</div>\n                    <div className='modal-content'>This is the modal content</div>\n                </div>\n            )}\n        </div>\n    );\n};"
	}
]
